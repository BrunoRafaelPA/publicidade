version: '3.8'

services:
  # Banco de dados PostgreSQL
  database:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: publicidade_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: wildfire
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Rails para desenvolvimento
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    environment:
      DATABASE_URL: postgresql://postgres:wildfire@database:5432/publicidade_development
      RAILS_ENV: development
      RAILS_LOG_TO_STDOUT: "true"
      BINDING: "0.0.0.0"
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - bundle_cache_dev:/usr/local/bundle
      - rails_storage_dev:/app/storage
      - rails_tmp_dev:/app/tmp
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network-dev
    stdin_open: true
    tty: true
    command: >
      sh -c "
        echo 'Aguardando banco de dados...' &&
        sleep 5 &&
        bundle install &&
        if ! rails db:version > /dev/null 2>&1; then
          echo 'Criando banco de dados...' &&
          rails db:create
        fi &&
        echo 'Executando migrações...' &&
        rails db:migrate &&
        echo 'Iniciando servidor Rails...' &&
        rails server -b 0.0.0.0
      "
    restart: unless-stopped

volumes:
  postgres_data_dev:
  bundle_cache_dev:
  rails_storage_dev:
  rails_tmp_dev:

networks:
  app-network-dev:
    driver: bridge